name: CI

on:
  push:
    branches-ignore: [ master ]
  workflow_dispatch:

jobs:
  build-container:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        alpine_version: ["3.14.3", "3.15.11", "3.16.9", "3.17.10", "3.18.12", "3.19.8", "3.20.7", "3.21.4", "3.22.1"]
    steps:
    - uses: actions/checkout@v4
    # Add support for more platforms with QEMU (optional)
    # https://github.com/docker/setup-qemu-action
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Get short commit SHA
      id: get_sha
      run: echo "SHORT_SHA=$(echo ${GITHUB_SHA:0:7})" >> $GITHUB_ENV
    
    # Safety check: Verify feature branch tag doesn't conflict with immutable patterns
    - name: Verify tag safety
      id: verify_tag
      env:
        DEBUG: ${{ runner.debug == '1' && 'true' || 'false' }}
      run: |
        TAG="${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}"
        echo "::notice::Verifying safety of feature branch tag: $TAG"
        
        # Use enhanced logging script for safety verification
        if ./scripts/check-immutable-tags.sh "$TAG"; then
          echo "is_safe=true" >> $GITHUB_OUTPUT
        else
          exit_code=$?
          if [ $exit_code -eq 1 ]; then
            echo "::error::Critical: Feature branch tag unexpectedly matches immutable pattern!"
            echo "::error::Tag $TAG should be mutable but was detected as immutable and existing."
            echo "::error::This indicates a serious issue with tag generation logic."
            echo "is_safe=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ $exit_code -eq 2 ]; then
            echo "::warning::API error during tag safety check - proceeding with feature branch build"
            echo "is_safe=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Unexpected exit code $exit_code from tag safety check"
            exit 1
          fi
        fi
    
    # Build multi-platform manifest (no push) with attestations using buildx
    - name: Build multi-platform manifest (no push)
      if: steps.verify_tag.outputs.is_safe == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x${{ contains(fromJSON('["3.20.7", "3.21.4", "3.22.1"]'), matrix.alpine_version) && ',linux/riscv64' || '' }}
        push: false
        provenance: true
        sbom: true
        tags: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.SHORT_SHA }}
          alpine_version=${{ matrix.alpine_version }}
    
    # Build single platform image for local testing (amd64 only)
    - name: Build single platform image for testing
      if: steps.verify_tag.outputs.is_safe == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        load: true
        tags: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-test
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.SHORT_SHA }}
          alpine_version=${{ matrix.alpine_version }}
    
    # Test the locally built image
    - name: Test built image functionality
      if: steps.verify_tag.outputs.is_safe == 'true'
      run: |
        echo "::notice::Testing built image: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-test"
        
        # Test the locally built image
        docker run --rm liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-test echo "Architecture test successful for Alpine ${{ matrix.alpine_version }}"
        
        echo "::notice::✅ Image test completed successfully for Alpine ${{ matrix.alpine_version }}"
    
    # Summary step for feature branch builds
    - name: Build summary  
      run: |
        if [ "${{ steps.verify_tag.outputs.is_safe }}" = "true" ]; then
          echo "::notice::✅ Successfully built multi-platform and tested ${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}"
        else
          echo "::error::❌ Build skipped due to tag safety check failure"
        fi
    
