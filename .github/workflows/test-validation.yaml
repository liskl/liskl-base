name: Test Validation

on:
  push:
    branches: [ master, feat/comprehensive-testing-immutable-tags ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [unit, integration, legacy]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up test environment
      run: |
        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y jq curl
        
        # Make scripts executable
        chmod +x scripts/*.sh
        chmod +x tests/unit/*.sh
        chmod +x tests/integration/*.sh
        chmod +x run-tests.sh
    
    - name: Run ${{ matrix.test-suite }} tests
      env:
        SKIP_LIVE_TESTS: true  # Skip live API tests in CI
        VERBOSE: true
      run: |
        echo "Running ${{ matrix.test-suite }} test suite"
        ./run-tests.sh --skip-live ${{ matrix.test-suite }}
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          test-results/
          *.log
        retention-days: 7

  coverage-report:
    runs-on: ubuntu-latest
    needs: run-tests
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up test environment  
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
        chmod +x scripts/*.sh
        chmod +x tests/unit/*.sh
        chmod +x tests/integration/*.sh
        chmod +x run-tests.sh
    
    - name: Generate coverage report
      env:
        SKIP_LIVE_TESTS: true
        COVERAGE_REPORT: true
      run: |
        echo "Generating comprehensive coverage report"
        ./run-tests.sh --coverage --skip-live all || echo "Tests completed with issues"
    
    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage/
          *.coverage
        retention-days: 30

  validate-script-syntax:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate shell script syntax
      run: |
        echo "Validating shell script syntax"
        
        # Check main script
        bash -n scripts/check-immutable-tags.sh
        echo "✓ Main script syntax valid"
        
        # Check test scripts
        find tests/ -name "*.sh" -exec bash -n {} \;
        echo "✓ Test script syntax valid"
        
        # Check test runner
        bash -n run-tests.sh  
        echo "✓ Test runner syntax valid"
        
        # Check build scripts
        bash -n build-local.sh
        bash -n test-build.sh
        echo "✓ Build script syntax valid"
    
    - name: Check script permissions
      run: |
        echo "Checking script permissions"
        
        # Main scripts should be executable
        test -x scripts/check-immutable-tags.sh || echo "Warning: Main script not executable"
        test -x run-tests.sh || echo "Warning: Test runner not executable"
        
        # Test scripts should be executable  
        find tests/ -name "*.sh" ! -executable -exec echo "Warning: {} not executable" \;
        
        echo "✓ Permission check completed"

  integration-smoke-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
        chmod +x scripts/*.sh
    
    - name: Smoke test - Tag pattern validation
      run: |
        echo "Running smoke tests for core functionality"
        
        # Test basic immutable tag detection
        echo "Testing immutable tag patterns..."
        if ./scripts/check-immutable-tags.sh --quiet test-mutable-tag; then
          echo "✓ Mutable tag correctly identified"
        else
          echo "✗ Issue with mutable tag detection"
          exit 1
        fi
        
        # Test JSON output format
        echo "Testing JSON output..."
        if ./scripts/check-immutable-tags.sh --json test-json-tag | jq . >/dev/null 2>&1; then
          echo "✓ JSON output format valid"
        else
          echo "✗ JSON output format invalid"
          exit 1
        fi
        
        echo "✓ Smoke tests passed"
    
    - name: Test workflow integration
      env:
        DEBUG: true
      run: |
        echo "Testing workflow integration scenarios"
        
        # Simulate feature branch workflow
        echo "Simulating feature branch tag checking..."
        FEATURE_TAG="$(date +%s)-alpine-3.22.1"
        
        if ./scripts/check-immutable-tags.sh --debug "$FEATURE_TAG"; then
          echo "✓ Feature branch tag handling works"
        else
          echo "✗ Feature branch tag handling failed"
          exit 1
        fi
        
        echo "✓ Workflow integration tests passed"

  summary:
    runs-on: ubuntu-latest
    needs: [run-tests, coverage-report, validate-script-syntax, integration-smoke-test]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "## Test Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check results of previous jobs
        if [[ "${{ needs.validate-script-syntax.result }}" == "success" ]]; then
          echo "✅ Script syntax validation: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Script syntax validation: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.integration-smoke-test.result }}" == "success" ]]; then
          echo "✅ Integration smoke tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration smoke tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.run-tests.result }}" == "success" ]]; then
          echo "✅ Comprehensive test suites: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Comprehensive test suites: ISSUES DETECTED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.coverage-report.result }}" == "success" ]]; then
          echo "✅ Coverage report generation: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Coverage report generation: ISSUES DETECTED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Test artifacts and coverage reports are available in the workflow artifacts.**" >> $GITHUB_STEP_SUMMARY