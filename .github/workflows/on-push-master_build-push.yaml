name: Base image build

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-container:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        alpine_version: ["3.14.3", "3.15.11", "3.16.9", "3.17.10", "3.18.12", "3.19.8", "3.20.7", "3.21.4", "3.22.1"]
    steps:
    - uses: actions/checkout@v4
    # Add support for more platforms with QEMU (optional)
    # https://github.com/docker/setup-qemu-action
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Extract branch name
      id: extract_branch
      run: echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')" >> $GITHUB_ENV
    
    # Check if tags are immutable and already exist on Docker Hub
    - name: Check immutable tag status
      id: check_tags
      env:
        DEBUG: ${{ runner.debug == '1' && 'true' || 'false' }}
      run: |
        # Prepare tags to check
        TAGS_TO_CHECK="alpine-${{ matrix.alpine_version }}"
        if [ "${{ matrix.alpine_version }}" = "3.22.1" ]; then
          TAGS_TO_CHECK="$TAGS_TO_CHECK latest"
        fi
        
        echo "::notice::Checking immutable tag status for: $TAGS_TO_CHECK"
        
        # Use enhanced logging script with GitHub Actions integration
        if ./scripts/check-immutable-tags.sh $TAGS_TO_CHECK; then
          echo "should_push=true" >> $GITHUB_OUTPUT
          echo "should_push_alpine=true" >> $GITHUB_OUTPUT
          if [ "${{ matrix.alpine_version }}" = "3.22.1" ]; then
            echo "should_push_latest=true" >> $GITHUB_OUTPUT
          fi
        else
          exit_code=$?
          if [ $exit_code -eq 1 ]; then
            # Some tags should be skipped - check which ones
            if ./scripts/check-immutable-tags.sh alpine-${{ matrix.alpine_version }} >/dev/null 2>&1; then
              # Alpine tag is OK, latest might be the issue
              echo "should_push=true" >> $GITHUB_OUTPUT
              echo "should_push_alpine=true" >> $GITHUB_OUTPUT
              echo "should_push_latest=false" >> $GITHUB_OUTPUT
            else
              # Alpine tag should be skipped
              echo "should_push=false" >> $GITHUB_OUTPUT
              echo "should_push_alpine=false" >> $GITHUB_OUTPUT
              echo "should_push_latest=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::error::API error occurred during tag checking (exit code: $exit_code)"
            exit 1
          fi
        fi
    
    # Build and push multi-platform manifest with attestations using buildx
    - name: Build and push multi-platform manifest with attestations
      if: steps.check_tags.outputs.should_push == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x${{ contains(fromJSON('["3.20.7", "3.21.4", "3.22.1"]'), matrix.alpine_version) && ',linux/riscv64' || '' }}
        push: true
        provenance: true
        sbom: true
        tags: |
          liskl/base:alpine-${{ matrix.alpine_version }}
          ${{ matrix.alpine_version == '3.22.1' && steps.check_tags.outputs.should_push_latest == 'true' && 'liskl/base:latest' || '' }}
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.BRANCH }}
          alpine_version=${{ matrix.alpine_version }}
    
    # Summary step to show what was done
    - name: Build summary
      run: |
        if [ "${{ steps.check_tags.outputs.should_push }}" = "true" ]; then
          echo "::notice::✅ Successfully built and pushed alpine-${{ matrix.alpine_version }}"
          if [ "${{ matrix.alpine_version }}" = "3.22.1" ] && [ "${{ steps.check_tags.outputs.should_push_latest }}" = "true" ]; then
            echo "::notice::✅ Successfully built and pushed latest tag"
          elif [ "${{ matrix.alpine_version }}" = "3.22.1" ]; then
            echo "::notice::ℹ️ Skipped latest tag (already exists)"
          fi
        else
          echo "::notice::⏭️ Skipped build for alpine-${{ matrix.alpine_version }} (tag already exists)"
        fi
    
