name: CI

on:
  push:
    branches-ignore: [ master ]
  workflow_dispatch:

jobs:
  build-container:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        alpine_version: ["3.14.3", "3.15.11", "3.16.9", "3.17.10", "3.18.12", "3.19.8", "3.20.7", "3.21.4", "3.22.1"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Get short commit SHA
      id: get_sha
      run: echo "SHORT_SHA=$(echo ${GITHUB_SHA:0:7})" >> $GITHUB_ENV
    
    # Install tools for SBOM generation and attestation
    - name: Install cosign
      uses: sigstore/cosign-installer@v3
    - name: Install syft for SBOM generation
      uses: anchore/sbom-action/download-syft@v0
    
    # Build all base architectures (available for all Alpine versions)
    - name: Build and push linux/386 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/386
        push: true
        provenance: false
        sbom: false
        tags: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-386
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.SHORT_SHA }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=x86
    
    - name: Build and push linux/amd64 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        provenance: false
        sbom: false
        tags: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-amd64
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.SHORT_SHA }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=x86_64
    
    - name: Build and push linux/arm/v6 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm/v6
        push: true
        provenance: false
        sbom: false
        tags: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-armv6
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.SHORT_SHA }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=armv7
    
    - name: Build and push linux/arm/v7 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm/v7
        push: true
        provenance: false
        sbom: false
        tags: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-armv7
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.SHORT_SHA }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=armhf
    
    - name: Build and push linux/arm64/v8 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64/v8
        push: true
        provenance: false
        sbom: false
        tags: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-arm64
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.SHORT_SHA }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=aarch64
    
    - name: Build and push linux/ppc64le image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/ppc64le
        push: true
        provenance: false
        sbom: false
        tags: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-ppc64le
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.SHORT_SHA }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=ppc64le
    
    - name: Build and push linux/s390x image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/s390x
        push: true
        provenance: false
        sbom: false
        tags: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-s390x
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.SHORT_SHA }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=s390x
    
    # Build riscv64 only for Alpine 3.20+
    - name: Build and push linux/riscv64 image
      if: contains(fromJSON('["3.20.7", "3.21.4", "3.22.1"]'), matrix.alpine_version)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/riscv64
        push: true
        provenance: false
        sbom: false
        tags: liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-riscv64
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.SHORT_SHA }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=riscv64
    
    # Create multi-platform manifests
    - name: Create and push multi-platform manifest
      run: |
        # Create base manifest with all common architectures
        docker manifest create liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }} \
          liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-386 \
          liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-amd64 \
          liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-armv6 \
          liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-armv7 \
          liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-arm64 \
          liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-ppc64le \
          liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-s390x
        
        # Add riscv64 for Alpine 3.20+
        if [[ "${{ matrix.alpine_version }}" =~ ^3\.(2[0-9]|[3-9][0-9])\. ]]; then
          docker manifest rm liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}
          docker manifest create liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }} \
            liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-386 \
            liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-amd64 \
            liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-armv6 \
            liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-armv7 \
            liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-arm64 \
            liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-ppc64le \
            liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-s390x \
            liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}-riscv64
        fi
        
        docker manifest push liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}
    
    # Get manifest digest for secure signing
    - name: Get manifest digest
      id: digest
      run: |
        # Get digest for the development multi-platform manifest
        DIGEST=$(docker manifest inspect liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }} | jq -r '.config.digest // .mediaType as $type | if $type == "application/vnd.docker.distribution.manifest.list.v2+json" then .manifests[0].digest else .config.digest end' 2>/dev/null || docker buildx imagetools inspect liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }} --format '{{.Manifest.Digest}}')
        echo "MANIFEST_DIGEST=${DIGEST}" >> $GITHUB_ENV
        echo "Development image digest: ${DIGEST}"
    
    # Generate SBOM and attach as attestation for development images
    - name: Generate and attach SBOM
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        COSIGN_PUBLIC_KEY: ${{ vars.COSIGN_PUBLIC_KEY }}
      run: |
        # Create public key file for verification reference
        if [ -n "${COSIGN_PUBLIC_KEY}" ]; then
          echo "${COSIGN_PUBLIC_KEY}" > cosign.pub
          echo "âœ“ Public key available for verification"
        fi
        
        # Generate SBOM for the development multi-platform image using digest
        IMAGE_WITH_DIGEST="liskl/base@${MANIFEST_DIGEST}"
        echo "Generating SBOM for ${IMAGE_WITH_DIGEST}"
        
        syft "${IMAGE_WITH_DIGEST}" \
          --output spdx-json=/tmp/sbom-${{ env.SHORT_SHA }}-${{ matrix.alpine_version }}.spdx.json
        
        # Also generate CycloneDX format for broader tool compatibility
        syft "${IMAGE_WITH_DIGEST}" \
          --output cyclonedx-json=/tmp/sbom-${{ env.SHORT_SHA }}-${{ matrix.alpine_version }}.cyclonedx.json
        
        # Upload SBOM as attestation using cosign with private key
        cosign attest --yes \
          --key env://COSIGN_PRIVATE_KEY \
          --predicate /tmp/sbom-${{ env.SHORT_SHA }}-${{ matrix.alpine_version }}.spdx.json \
          --type spdx \
          "${IMAGE_WITH_DIGEST}"
        
        # Also attach CycloneDX SBOM
        cosign attest --yes \
          --key env://COSIGN_PRIVATE_KEY \
          --predicate /tmp/sbom-${{ env.SHORT_SHA }}-${{ matrix.alpine_version }}.cyclonedx.json \
          --type cyclonedx \
          "${IMAGE_WITH_DIGEST}"
    
    # Generate SLSA provenance attestation for development images
    - name: Generate and attach SLSA provenance
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      run: |
        # Generate SLSA provenance for the development multi-platform image
        IMAGE_WITH_DIGEST="liskl/base@${MANIFEST_DIGEST}"
        echo "Generating SLSA provenance for ${IMAGE_WITH_DIGEST}"
        
        # Create SLSA provenance predicate for development build
        cat > /tmp/slsa-provenance-${{ env.SHORT_SHA }}-${{ matrix.alpine_version }}.json << EOF
        {
          "_type": "https://slsa.dev/provenance/v0.2",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "subject": [{
            "name": "liskl/base:${{ env.SHORT_SHA }}-alpine-${{ matrix.alpine_version }}",
            "digest": {
              "sha256": "$(echo ${MANIFEST_DIGEST} | cut -d: -f2)"
            }
          }],
          "predicate": {
            "builder": {
              "id": "https://github.com/liskl/liskl-base/.github/workflows/on-push-non-master_build-push.yaml@${{ github.ref }}"
            },
            "buildType": "https://github.com/liskl/liskl-base/docker-build@v1",
            "invocation": {
              "configSource": {
                "uri": "git+${{ github.server_url }}/${{ github.repository }}@${{ github.ref }}",
                "digest": {
                  "sha1": "${{ github.sha }}"
                },
                "entryPoint": ".github/workflows/on-push-non-master_build-push.yaml"
              },
              "parameters": {
                "alpine_version": "${{ matrix.alpine_version }}",
                "ALPINE_ARCH": "multi-platform",
                "RELEASE_VERSION": "${{ matrix.alpine_version }}",
                "BRANCH": "${{ env.SHORT_SHA }}",
                "development_build": true
              },
              "environment": {
                "github": {
                  "actor": "${{ github.actor }}",
                  "event_name": "${{ github.event_name }}",
                  "ref": "${{ github.ref }}",
                  "ref_type": "${{ github.ref_type }}",
                  "repository": "${{ github.repository }}",
                  "repository_owner": "${{ github.repository_owner }}",
                  "run_id": "${{ github.run_id }}",
                  "run_number": "${{ github.run_number }}",
                  "run_attempt": "${{ github.run_attempt }}",
                  "sha": "${{ github.sha }}"
                }
              }
            },
            "metadata": {
              "buildInvocationId": "${{ github.run_id }}-${{ github.run_attempt }}",
              "buildStartedOn": "${{ github.event.head_commit.timestamp }}",
              "buildFinishedOn": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "completeness": {
                "parameters": true,
                "environment": true,
                "materials": true
              },
              "reproducible": false
            },
            "materials": [{
              "uri": "git+${{ github.server_url }}/${{ github.repository }}@${{ github.ref }}",
              "digest": {
                "sha1": "${{ github.sha }}"
              }
            }, {
              "uri": "https://dl-cdn.alpinelinux.org/alpine/v${{ matrix.alpine_version }}/releases/",
              "digest": {
                "description": "Alpine Linux minirootfs archives for ${{ matrix.alpine_version }}"
              }
            }]
          }
        }
        EOF
        
        # Attach SLSA provenance attestation
        cosign attest --yes \
          --key env://COSIGN_PRIVATE_KEY \
          --predicate /tmp/slsa-provenance-${{ env.SHORT_SHA }}-${{ matrix.alpine_version }}.json \
          --type slsaprovenance \
          "${IMAGE_WITH_DIGEST}"
