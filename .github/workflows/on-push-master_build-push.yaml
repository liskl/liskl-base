name: Base image build

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-container:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        alpine_version: ["3.14.3", "3.15.11", "3.16.9", "3.17.10", "3.18.12", "3.19.8", "3.20.7", "3.21.4", "3.22.1"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Extract branch name
      id: extract_branch
      run: echo "BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')" >> $GITHUB_ENV
    
    # Install tools for SBOM generation and attestation
    # Dual attestation strategy: BuildKit for Docker Hub compliance + cosign for verification
    - name: Install cosign
      uses: sigstore/cosign-installer@v3
    - name: Install syft for SBOM generation
      uses: anchore/sbom-action/download-syft@v0
    
    # Build all base architectures (available for all Alpine versions)
    - name: Build and push linux/386 image
      id: build-386
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/386
        push: true
        provenance: true
        sbom: true
        tags: |
          liskl/base:alpine-${{ matrix.alpine_version }}-386
          ${{ matrix.alpine_version == '3.22.1' && 'liskl/base:latest-386' || '' }}
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.BRANCH }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=x86
    
    - name: Build and push linux/amd64 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        provenance: true
        sbom: true
        tags: |
          liskl/base:alpine-${{ matrix.alpine_version }}-amd64
          ${{ matrix.alpine_version == '3.22.1' && 'liskl/base:latest-amd64' || '' }}
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.BRANCH }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=x86_64
    
    - name: Build and push linux/arm/v6 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm/v6
        push: true
        provenance: true
        sbom: true
        tags: |
          liskl/base:alpine-${{ matrix.alpine_version }}-armv6
          ${{ matrix.alpine_version == '3.22.1' && 'liskl/base:latest-armv6' || '' }}
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.BRANCH }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=armhf
    
    - name: Build and push linux/arm/v7 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm/v7
        push: true
        provenance: true
        sbom: true
        tags: |
          liskl/base:alpine-${{ matrix.alpine_version }}-armv7
          ${{ matrix.alpine_version == '3.22.1' && 'liskl/base:latest-armv7' || '' }}
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.BRANCH }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=armv7
    
    - name: Build and push linux/arm64/v8 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64/v8
        push: true
        provenance: true
        sbom: true
        tags: |
          liskl/base:alpine-${{ matrix.alpine_version }}-arm64
          ${{ matrix.alpine_version == '3.22.1' && 'liskl/base:latest-arm64' || '' }}
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.BRANCH }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=aarch64
    
    - name: Build and push linux/ppc64le image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/ppc64le
        push: true
        provenance: true
        sbom: true
        tags: |
          liskl/base:alpine-${{ matrix.alpine_version }}-ppc64le
          ${{ matrix.alpine_version == '3.22.1' && 'liskl/base:latest-ppc64le' || '' }}
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.BRANCH }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=ppc64le
    
    - name: Build and push linux/s390x image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/s390x
        push: true
        provenance: true
        sbom: true
        tags: |
          liskl/base:alpine-${{ matrix.alpine_version }}-s390x
          ${{ matrix.alpine_version == '3.22.1' && 'liskl/base:latest-s390x' || '' }}
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.BRANCH }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=s390x
    
    # Build riscv64 only for Alpine 3.20+
    - name: Build and push linux/riscv64 image
      if: contains(fromJSON('["3.20.7", "3.21.4", "3.22.1"]'), matrix.alpine_version)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/riscv64
        push: true
        provenance: true
        sbom: true
        tags: |
          liskl/base:alpine-${{ matrix.alpine_version }}-riscv64
          ${{ matrix.alpine_version == '3.22.1' && 'liskl/base:latest-riscv64' || '' }}
        build-args: |
          RELEASE_VERSION=${{ matrix.alpine_version }}
          BRANCH=${{ env.BRANCH }}
          alpine_version=${{ matrix.alpine_version }}
          ALPINE_ARCH=riscv64
    
    # Create multi-platform manifests
    - name: Create and push multi-platform manifest
      run: |
        # Create base manifest with all common architectures
        docker manifest create liskl/base:alpine-${{ matrix.alpine_version }} \
          liskl/base:alpine-${{ matrix.alpine_version }}-386 \
          liskl/base:alpine-${{ matrix.alpine_version }}-amd64 \
          liskl/base:alpine-${{ matrix.alpine_version }}-armv6 \
          liskl/base:alpine-${{ matrix.alpine_version }}-armv7 \
          liskl/base:alpine-${{ matrix.alpine_version }}-arm64 \
          liskl/base:alpine-${{ matrix.alpine_version }}-ppc64le \
          liskl/base:alpine-${{ matrix.alpine_version }}-s390x
        
        # Add riscv64 for Alpine 3.20+
        if [[ "${{ matrix.alpine_version }}" =~ ^3\.(2[0-9]|[3-9][0-9])\. ]]; then
          docker manifest create liskl/base:alpine-${{ matrix.alpine_version }}-temp \
            liskl/base:alpine-${{ matrix.alpine_version }}-386 \
            liskl/base:alpine-${{ matrix.alpine_version }}-amd64 \
            liskl/base:alpine-${{ matrix.alpine_version }}-armv6 \
            liskl/base:alpine-${{ matrix.alpine_version }}-armv7 \
            liskl/base:alpine-${{ matrix.alpine_version }}-arm64 \
            liskl/base:alpine-${{ matrix.alpine_version }}-ppc64le \
            liskl/base:alpine-${{ matrix.alpine_version }}-s390x \
            liskl/base:alpine-${{ matrix.alpine_version }}-riscv64
          docker manifest rm liskl/base:alpine-${{ matrix.alpine_version }}
          docker manifest create liskl/base:alpine-${{ matrix.alpine_version }} \
            liskl/base:alpine-${{ matrix.alpine_version }}-386 \
            liskl/base:alpine-${{ matrix.alpine_version }}-amd64 \
            liskl/base:alpine-${{ matrix.alpine_version }}-armv6 \
            liskl/base:alpine-${{ matrix.alpine_version }}-armv7 \
            liskl/base:alpine-${{ matrix.alpine_version }}-arm64 \
            liskl/base:alpine-${{ matrix.alpine_version }}-ppc64le \
            liskl/base:alpine-${{ matrix.alpine_version }}-s390x \
            liskl/base:alpine-${{ matrix.alpine_version }}-riscv64
        fi
        
        # Check if manifest already exists before pushing
        if docker manifest inspect liskl/base:alpine-${{ matrix.alpine_version }} >/dev/null 2>&1; then
          echo "ℹ Manifest liskl/base:alpine-${{ matrix.alpine_version }} already exists, skipping push"
        else
          docker manifest push liskl/base:alpine-${{ matrix.alpine_version }}
          echo "✓ Manifest liskl/base:alpine-${{ matrix.alpine_version }} pushed successfully"
        fi
        
        # Create latest manifest for Alpine 3.22.1
        if [ "${{ matrix.alpine_version }}" = "3.22.1" ]; then
          if docker manifest inspect liskl/base:latest >/dev/null 2>&1; then
            echo "ℹ Manifest liskl/base:latest already exists, skipping creation"
          else
            docker manifest create liskl/base:latest \
              liskl/base:latest-386 \
              liskl/base:latest-amd64 \
              liskl/base:latest-armv6 \
              liskl/base:latest-armv7 \
              liskl/base:latest-arm64 \
              liskl/base:latest-ppc64le \
              liskl/base:latest-s390x \
              liskl/base:latest-riscv64
            docker manifest push liskl/base:latest
            echo "✓ Manifest liskl/base:latest pushed successfully"
          fi
        fi
    
    # Get manifest digest for secure signing
    - name: Get manifest digest
      id: digest
      run: |
        # Get digest for the multi-platform manifest (works for both new and existing manifests)
        echo "Retrieving manifest digest for liskl/base:alpine-${{ matrix.alpine_version }}"
        DIGEST=$(docker buildx imagetools inspect liskl/base:alpine-${{ matrix.alpine_version }} --format '{{.Manifest.Digest}}' 2>/dev/null || docker manifest inspect liskl/base:alpine-${{ matrix.alpine_version }} | jq -r '.config.digest // .mediaType as $type | if $type == "application/vnd.docker.distribution.manifest.list.v2+json" then .manifests[0].digest else .config.digest end' 2>/dev/null)
        
        if [ -z "$DIGEST" ] || [ "$DIGEST" = "null" ]; then
          echo "Error: Could not retrieve digest for liskl/base:alpine-${{ matrix.alpine_version }}"
          exit 1
        fi
        
        echo "MANIFEST_DIGEST=${DIGEST}" >> $GITHUB_ENV
        echo "Image digest: ${DIGEST}"
        
        # Get digest for latest tag if this is Alpine 3.22.1
        if [ "${{ matrix.alpine_version }}" = "3.22.1" ]; then
          echo "Retrieving manifest digest for liskl/base:latest"
          LATEST_DIGEST=$(docker buildx imagetools inspect liskl/base:latest --format '{{.Manifest.Digest}}' 2>/dev/null || docker manifest inspect liskl/base:latest | jq -r '.config.digest // .mediaType as $type | if $type == "application/vnd.docker.distribution.manifest.list.v2+json" then .manifests[0].digest else .config.digest end' 2>/dev/null)
          
          if [ -z "$LATEST_DIGEST" ] || [ "$LATEST_DIGEST" = "null" ]; then
            echo "Error: Could not retrieve digest for liskl/base:latest"
            exit 1
          fi
          
          echo "LATEST_DIGEST=${LATEST_DIGEST}" >> $GITHUB_ENV
          echo "Latest digest: ${LATEST_DIGEST}"
        fi
    
    # Generate additional cosign SBOM attestations (BuildKit SBOMs are automatically generated above)
    - name: Generate and attach SBOM
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        COSIGN_PUBLIC_KEY: ${{ vars.COSIGN_PUBLIC_KEY }}
      run: |
        # Create public key file for verification reference
        if [ -n "${COSIGN_PUBLIC_KEY}" ]; then
          echo "${COSIGN_PUBLIC_KEY}" > cosign.pub
          echo "✓ Public key available for verification"
        fi
        
        # Check if attestations already exist for this digest
        IMAGE_WITH_DIGEST="liskl/base@${MANIFEST_DIGEST}"
        echo "Checking for existing attestations on ${IMAGE_WITH_DIGEST}"
        
        # Check for existing SPDX attestation
        SPDX_EXISTS=false
        if cosign verify-attestation --key cosign.pub --type spdx "${IMAGE_WITH_DIGEST}" >/dev/null 2>&1; then
          echo "ℹ SPDX SBOM attestation already exists for this digest"
          SPDX_EXISTS=true
        fi
        
        # Check for existing CycloneDX attestation
        CYCLONEDX_EXISTS=false
        if cosign verify-attestation --key cosign.pub --type cyclonedx "${IMAGE_WITH_DIGEST}" >/dev/null 2>&1; then
          echo "ℹ CycloneDX SBOM attestation already exists for this digest"
          CYCLONEDX_EXISTS=true
        fi
        
        # Generate and attach SBOMs only if they don't exist
        if [ "$SPDX_EXISTS" = "false" ]; then
          echo "Generating SPDX SBOM for ${IMAGE_WITH_DIGEST}"
          syft "${IMAGE_WITH_DIGEST}" \
            --output spdx-json=/tmp/sbom-${{ matrix.alpine_version }}.spdx.json
          
          # Upload SPDX SBOM as attestation using cosign with private key
          cosign attest --yes \
            --key env://COSIGN_PRIVATE_KEY \
            --predicate /tmp/sbom-${{ matrix.alpine_version }}.spdx.json \
            --type spdx \
            "${IMAGE_WITH_DIGEST}"
          echo "✓ SPDX SBOM attestation created"
        fi
        
        if [ "$CYCLONEDX_EXISTS" = "false" ]; then
          echo "Generating CycloneDX SBOM for ${IMAGE_WITH_DIGEST}"
          syft "${IMAGE_WITH_DIGEST}" \
            --output cyclonedx-json=/tmp/sbom-${{ matrix.alpine_version }}.cyclonedx.json
          
          # Upload CycloneDX SBOM as attestation using cosign with private key
          cosign attest --yes \
            --key env://COSIGN_PRIVATE_KEY \
            --predicate /tmp/sbom-${{ matrix.alpine_version }}.cyclonedx.json \
            --type cyclonedx \
            "${IMAGE_WITH_DIGEST}"
          echo "✓ CycloneDX SBOM attestation created"
        fi
        
        # Generate SBOM for latest tag (Alpine 3.22.1 only)
        if [ "${{ matrix.alpine_version }}" = "3.22.1" ]; then
          LATEST_IMAGE_WITH_DIGEST="liskl/base@${LATEST_DIGEST}"
          echo "Checking for existing attestations on ${LATEST_IMAGE_WITH_DIGEST}"
          
          # Check for existing latest tag attestations
          LATEST_SPDX_EXISTS=false
          if cosign verify-attestation --key cosign.pub --type spdx "${LATEST_IMAGE_WITH_DIGEST}" >/dev/null 2>&1; then
            echo "ℹ SPDX SBOM attestation already exists for latest tag"
            LATEST_SPDX_EXISTS=true
          fi
          
          LATEST_CYCLONEDX_EXISTS=false
          if cosign verify-attestation --key cosign.pub --type cyclonedx "${LATEST_IMAGE_WITH_DIGEST}" >/dev/null 2>&1; then
            echo "ℹ CycloneDX SBOM attestation already exists for latest tag"
            LATEST_CYCLONEDX_EXISTS=true
          fi
          
          # Generate and attach SBOMs for latest tag only if they don't exist
          if [ "$LATEST_SPDX_EXISTS" = "false" ]; then
            echo "Generating SPDX SBOM for ${LATEST_IMAGE_WITH_DIGEST}"
            syft "${LATEST_IMAGE_WITH_DIGEST}" \
              --output spdx-json=/tmp/sbom-latest.spdx.json
            
            cosign attest --yes \
              --key env://COSIGN_PRIVATE_KEY \
              --predicate /tmp/sbom-latest.spdx.json \
              --type spdx \
              "${LATEST_IMAGE_WITH_DIGEST}"
            echo "✓ SPDX SBOM attestation created for latest tag"
          fi
          
          if [ "$LATEST_CYCLONEDX_EXISTS" = "false" ]; then
            echo "Generating CycloneDX SBOM for ${LATEST_IMAGE_WITH_DIGEST}"
            syft "${LATEST_IMAGE_WITH_DIGEST}" \
              --output cyclonedx-json=/tmp/sbom-latest.cyclonedx.json
            
            cosign attest --yes \
              --key env://COSIGN_PRIVATE_KEY \
              --predicate /tmp/sbom-latest.cyclonedx.json \
              --type cyclonedx \
              "${LATEST_IMAGE_WITH_DIGEST}"
            echo "✓ CycloneDX SBOM attestation created for latest tag"
          fi
        fi
    
    # Generate additional cosign SLSA provenance attestations (BuildKit provenance is automatically generated above)
    - name: Generate and attach SLSA provenance
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        COSIGN_PUBLIC_KEY: ${{ vars.COSIGN_PUBLIC_KEY }}
      run: |
        # Create public key file for verification reference
        if [ -n "${COSIGN_PUBLIC_KEY}" ]; then
          echo "${COSIGN_PUBLIC_KEY}" > cosign.pub
        fi
        
        # Check if SLSA provenance already exists for this digest
        IMAGE_WITH_DIGEST="liskl/base@${MANIFEST_DIGEST}"
        echo "Checking for existing SLSA provenance on ${IMAGE_WITH_DIGEST}"
        
        SLSA_EXISTS=false
        if cosign verify-attestation --key cosign.pub --type slsaprovenance "${IMAGE_WITH_DIGEST}" >/dev/null 2>&1; then
          echo "ℹ SLSA provenance attestation already exists for this digest"
          SLSA_EXISTS=true
        fi
        
        # Generate and attach SLSA provenance only if it doesn't exist
        if [ "$SLSA_EXISTS" = "false" ]; then
          echo "Generating SLSA provenance for ${IMAGE_WITH_DIGEST}"
        
          # Create SLSA provenance predicate using jq for reliable JSON generation
          MANIFEST_SHA=$(echo ${MANIFEST_DIGEST} | cut -d: -f2)
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          # Create SLSA predicate JSON (cosign expects ONLY the predicate, not the full attestation)
          jq -n \
            --arg builderId "https://github.com/liskl/liskl-base/.github/workflows/on-push-master_build-push.yaml@${{ github.ref }}" \
            --arg buildType "https://github.com/liskl/liskl-base/docker-build@v1" \
            --arg uri "git+${{ github.server_url }}/${{ github.repository }}@${{ github.ref }}" \
            --arg sha1 "${{ github.sha }}" \
            --arg entryPoint ".github/workflows/on-push-master_build-push.yaml" \
            --arg alpineVersion "${{ matrix.alpine_version }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg actor "${{ github.actor }}" \
            --arg eventName "${{ github.event_name }}" \
            --arg ref "${{ github.ref }}" \
            --arg refType "${{ github.ref_type }}" \
            --arg repository "${{ github.repository }}" \
            --arg repositoryOwner "${{ github.repository_owner }}" \
            --arg runId "${{ github.run_id }}" \
            --arg runNumber "${{ github.run_number }}" \
            --arg runAttempt "${{ github.run_attempt }}" \
            --arg sha "${{ github.sha }}" \
            --arg buildInvocationId "${{ github.run_id }}-${{ github.run_attempt }}" \
            --arg buildStartedOn "${{ github.event.head_commit.timestamp }}" \
            --arg buildFinishedOn "${BUILD_TIME}" \
            --arg materialsUri "https://dl-cdn.alpinelinux.org/alpine/v${{ matrix.alpine_version }}/releases/" \
            --arg materialsDesc "Alpine Linux minirootfs archives for ${{ matrix.alpine_version }}" \
            '{
              "builder": {
                "id": $builderId
              },
              "buildType": $buildType,
              "invocation": {
                "configSource": {
                  "uri": $uri,
                  "digest": {
                    "sha1": $sha1
                  },
                  "entryPoint": $entryPoint
                },
                "parameters": {
                  "alpine_version": $alpineVersion,
                  "ALPINE_ARCH": "multi-platform",
                  "RELEASE_VERSION": $alpineVersion,
                  "BRANCH": $branch
                },
                "environment": {
                  "github": {
                    "actor": $actor,
                    "event_name": $eventName,
                    "ref": $ref,
                    "ref_type": $refType,
                    "repository": $repository,
                    "repository_owner": $repositoryOwner,
                    "run_id": $runId,
                    "run_number": $runNumber,
                    "run_attempt": $runAttempt,
                    "sha": $sha
                  }
                }
              },
              "metadata": {
                "buildInvocationId": $buildInvocationId,
                "buildStartedOn": $buildStartedOn,
                "buildFinishedOn": $buildFinishedOn,
                "completeness": {
                  "parameters": true,
                  "environment": true,
                  "materials": true
                },
                "reproducible": false
              },
              "materials": [{
                "uri": $uri,
                "digest": {
                  "sha1": $sha1
                }
              }, {
                "uri": $materialsUri,
                "digest": {
                  "description": $materialsDesc
                }
              }]
            }' > /tmp/slsa-provenance-${{ matrix.alpine_version }}.json
          
          # Validate the JSON was created correctly
          echo "Generated SLSA predicate JSON:"
          cat /tmp/slsa-provenance-${{ matrix.alpine_version }}.json
          echo ""
          echo "Validating JSON structure..."
          jq '.builder.id' /tmp/slsa-provenance-${{ matrix.alpine_version }}.json
        
          # Attach SLSA provenance attestation
          cosign attest --yes \
            --key env://COSIGN_PRIVATE_KEY \
            --predicate /tmp/slsa-provenance-${{ matrix.alpine_version }}.json \
            --type slsaprovenance \
            "${IMAGE_WITH_DIGEST}"
          echo "✓ SLSA provenance attestation created"
        fi
        
        # Generate SLSA provenance for latest tag (Alpine 3.22.1 only)
        if [ "${{ matrix.alpine_version }}" = "3.22.1" ]; then
          LATEST_IMAGE_WITH_DIGEST="liskl/base@${LATEST_DIGEST}"
          echo "Checking for existing SLSA provenance on ${LATEST_IMAGE_WITH_DIGEST}"
          
          LATEST_SLSA_EXISTS=false
          if cosign verify-attestation --key cosign.pub --type slsaprovenance "${LATEST_IMAGE_WITH_DIGEST}" >/dev/null 2>&1; then
            echo "ℹ SLSA provenance attestation already exists for latest tag"
            LATEST_SLSA_EXISTS=true
          fi
          
          if [ "$LATEST_SLSA_EXISTS" = "false" ]; then
            echo "Generating SLSA provenance for ${LATEST_IMAGE_WITH_DIGEST}"
          
            # Create SLSA provenance for latest tag using jq for reliable JSON generation
            LATEST_SHA=$(echo ${LATEST_DIGEST} | cut -d: -f2)
            LATEST_BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            
            # Create SLSA predicate JSON (cosign expects ONLY the predicate, not the full attestation)
            jq -n \
              --arg builderId "https://github.com/liskl/liskl-base/.github/workflows/on-push-master_build-push.yaml@${{ github.ref }}" \
              --arg buildType "https://github.com/liskl/liskl-base/docker-build@v1" \
              --arg uri "git+${{ github.server_url }}/${{ github.repository }}@${{ github.ref }}" \
              --arg sha1 "${{ github.sha }}" \
              --arg entryPoint ".github/workflows/on-push-master_build-push.yaml" \
              --arg alpineVersion "${{ matrix.alpine_version }}" \
              --arg branch "${{ github.ref_name }}" \
              --arg actor "${{ github.actor }}" \
              --arg eventName "${{ github.event_name }}" \
              --arg ref "${{ github.ref }}" \
              --arg refType "${{ github.ref_type }}" \
              --arg repository "${{ github.repository }}" \
              --arg repositoryOwner "${{ github.repository_owner }}" \
              --arg runId "${{ github.run_id }}" \
              --arg runNumber "${{ github.run_number }}" \
              --arg runAttempt "${{ github.run_attempt }}" \
              --arg sha "${{ github.sha }}" \
              --arg buildInvocationId "${{ github.run_id }}-${{ github.run_attempt }}" \
              --arg buildStartedOn "${{ github.event.head_commit.timestamp }}" \
              --arg buildFinishedOn "${LATEST_BUILD_TIME}" \
              --arg materialsUri "https://dl-cdn.alpinelinux.org/alpine/v${{ matrix.alpine_version }}/releases/" \
              --arg materialsDesc "Alpine Linux minirootfs archives for ${{ matrix.alpine_version }}" \
              '{
                "builder": {
                  "id": $builderId
                },
                "buildType": $buildType,
                "invocation": {
                  "configSource": {
                    "uri": $uri,
                    "digest": {
                      "sha1": $sha1
                    },
                    "entryPoint": $entryPoint
                  },
                  "parameters": {
                    "alpine_version": $alpineVersion,
                    "ALPINE_ARCH": "multi-platform",
                    "RELEASE_VERSION": $alpineVersion,
                    "BRANCH": $branch,
                    "tag": "latest"
                  },
                  "environment": {
                    "github": {
                      "actor": $actor,
                      "event_name": $eventName,
                      "ref": $ref,
                      "ref_type": $refType,
                      "repository": $repository,
                      "repository_owner": $repositoryOwner,
                      "run_id": $runId,
                      "run_number": $runNumber,
                      "run_attempt": $runAttempt,
                      "sha": $sha
                    }
                  }
                },
                "metadata": {
                  "buildInvocationId": $buildInvocationId,
                  "buildStartedOn": $buildStartedOn,
                  "buildFinishedOn": $buildFinishedOn,
                  "completeness": {
                    "parameters": true,
                    "environment": true,
                    "materials": true
                  },
                  "reproducible": false
                },
                "materials": [{
                  "uri": $uri,
                  "digest": {
                    "sha1": $sha1
                  }
                }, {
                  "uri": $materialsUri,
                  "digest": {
                    "description": $materialsDesc
                  }
                }]
              }' > /tmp/slsa-provenance-latest.json
            
            # Validate the JSON was created correctly
            echo "Generated SLSA predicate JSON for latest:"
            cat /tmp/slsa-provenance-latest.json
            echo ""
            echo "Validating JSON structure..."
            jq '.builder.id' /tmp/slsa-provenance-latest.json
          
            # Attach SLSA provenance to latest tag
            cosign attest --yes \
              --key env://COSIGN_PRIVATE_KEY \
              --predicate /tmp/slsa-provenance-latest.json \
              --type slsaprovenance \
              "${LATEST_IMAGE_WITH_DIGEST}"
            echo "✓ SLSA provenance attestation created for latest tag"
          fi
        fi
